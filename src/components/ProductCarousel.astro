---
// This is frontmatter, assuming you're using a framework like Astro or SvelteKit.
// If not, you can ignore this part.
import { products as allProducts } from '../data/products.js';

const shuffledProducts = allProducts.sort(() => 0.5 - Math.random());
const featuredProducts = shuffledProducts.slice(0, 6);
---

<section class="product-carousel-section">
  <div class="container">
    <h2 class="section-title">Featured Products</h2>
    <p class="section-subtitle">Authorized dealer of premium cement brands in Goa</p>
    
    <div class="carousel-container">
      <div class="carousel-wrapper">
        <div class="carousel-track" id="carousel-track">
          {featuredProducts.map(product => (
            <div class="product-card">
              <div class="product-image">
                <img src={product.image} alt={product.alt} loading="lazy" />
              </div>
              <div class="product-info">
                <h3>{product.name}</h3>
                <p>{product.description}</p>
                {product.rating && (
                  <div class="product-rating">
                    <div class="stars">
                      {Array.from({ length: 5 }).map((_, i) => (
                        <span class="star">{i < product.rating ? '★' : '☆'}</span>
                      ))}
                    </div>
                    <span class="rating-text">{product.ratingText}</span>
                  </div>
                )}
                <div class="product-features">
                  {product.features.slice(0, 2).map(feature => (
                    <span class="feature">{feature}</span>
                  ))}
                </div>
                <div class="product-actions">
                  <a href="/contact" class="btn btn-primary">Get Quote</a>
                  <a href={`/products#${product.brand.toLowerCase().replace(/ & /g, '-').replace(/ /g, '-')}`} class="btn btn-secondary btn-sm">View Details</a>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <button class="carousel-btn carousel-btn-prev" id="prev-btn" aria-label="Previous products">
        <svg viewBox="0 0 24 24" width="24" height="24">
          <path fill="currentColor" d="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z"/>
        </svg>
      </button>
      
      <button class="carousel-btn carousel-btn-next" id="next-btn" aria-label="Next products">
        <svg viewBox="0 0 24 24" width="24" height="24">
          <path fill="currentColor" d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z"/>
        </svg>
      </button>
    </div>
    
    <div class="carousel-dots">
      {featuredProducts.map((_, index) => (
        <button class:list={["dot", { active: index === 0 }]} data-slide={index}></button>
      ))}
    </div>
  </div>
</section>

<style>
  .product-carousel-section{padding:5rem 0;background:linear-gradient(135deg,#F8FAFC 0%,#F1F5F9 100%)}.section-subtitle{text-align:center;font-size:1.1rem;color:#64748B;margin-bottom:3rem;max-width:600px;margin-left:auto;margin-right:auto}.carousel-container{position:relative;max-width:1200px;margin:0 auto;overflow:hidden;border-radius:16px}.carousel-wrapper{overflow:hidden}.carousel-track{display:flex;transition:transform .5s ease-in-out;gap:1.5rem}.product-card{flex:0 0 300px;background:white;border-radius:12px;overflow:hidden;box-shadow:0 4px 12px rgba(0,0,0,0.1);transition:all .3s ease}.product-card:hover{transform:translateY(-4px);box-shadow:0 8px 25px rgba(0,0,0,0.15)}
  
  .product-image {
    position: relative;
    height: 250px;
    overflow: hidden;
    background-color: #fff;
  }
  .product-image img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    transition: transform 0.3s ease;
  }

  .product-card:hover .product-image img{transform:scale(1.05)}.product-info{padding:1.5rem}.product-info h3{font-size:1.25rem;font-weight:600;color:#1E293B;margin-bottom:0.5rem}.product-info p{color:#64748B;margin-bottom:1rem;line-height:1.5;font-size:0.9rem}.product-rating{display:flex;align-items:center;gap:0.5rem;margin-bottom:1rem}.stars{display:flex;gap:2px}.star{color:#FBBF24;font-size:0.9rem}.rating-text{font-size:0.8rem;color:#64748B;font-weight:500}.product-features{display:flex;gap:0.5rem;margin-bottom:1.5rem;flex-wrap:wrap}.feature{background:#EFF6FF;color:#1D4ED8;padding:0.25rem 0.75rem;border-radius:20px;font-size:0.75rem;font-weight:500}.product-actions{display:flex;gap:0.5rem;flex-wrap:wrap;justify-content:center;align-items:center}.btn-sm{padding:0.5rem 1rem;font-size:0.8rem;flex:1;min-width:100px;text-align:center;display:inline-flex;align-items:center;justify-content:center}.carousel-btn{position:absolute;top:50%;transform:translateY(-50%);background:white;border:none;width:50px;height:50px;border-radius:50%;display:flex;align-items:center;justify-content:center;cursor:pointer;box-shadow:0 4px 12px rgba(0,0,0,0.15);transition:all .3s ease;z-index:10}.carousel-btn:hover{background:#2563EB;color:white;transform:translateY(-50%) scale(1.1)}.carousel-btn-prev{left:5px}.carousel-btn-next{right:5px}.carousel-dots{display:flex;justify-content:center;gap:0.5rem;margin-top:2rem}.dot{width:12px;height:12px;border-radius:50%;border:none;background:#CBD5E1;cursor:pointer;transition:all .3s ease}.dot.active{background:#2563EB;transform:scale(1.2)}
  
  @media (max-width: 768px) {
    .product-carousel-section { padding: 3rem 0; }
    .product-card { flex: 0 0 280px; }
    .carousel-btn { width: 40px; height: 40px; }
    
    .carousel-btn-prev { left: 5px; }
    .carousel-btn-next { right: 5px; }
    
    .product-info { padding: 1rem; }
    .product-info h3 { font-size: 1.1rem; }
    .product-actions { flex-direction: column; gap: 0.75rem; }
    .btn-sm { min-width: auto; width: 100%; }
  }
  
  @media (max-width: 480px) {
    .product-card { flex: 0 0 250px; }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const track = document.getElementById('carousel-track');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  const dots = document.querySelectorAll('.dot');
  const carouselContainer = document.querySelector('.carousel-container');

  if (!track || !prevBtn || !nextBtn || !dots.length) {
    return;
  }

  const originalSlides = Array.from(track.children);
  const slideWidth = originalSlides[0].offsetWidth + 24;

  originalSlides.forEach(slide => {
    track.appendChild(slide.cloneNode(true));
  });
  originalSlides.slice().reverse().forEach(slide => {
    track.insertBefore(slide.cloneNode(true), track.firstChild);
  });

  const totalSlides = originalSlides.length;
  let currentIndex = totalSlides; 
  let isTransitioning = false;

  track.style.transform = `translateX(${-currentIndex * slideWidth}px)`;

  function updateDots() {
    const realIndex = (currentIndex - totalSlides) % totalSlides;
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === realIndex);
    });
  }

  function moveToIndex(index) {
    if (isTransitioning) return;
    isTransitioning = true;
    track.style.transition = 'transform 0.5s ease-in-out';
    track.style.transform = `translateX(${-index * slideWidth}px)`;
    currentIndex = index;
    updateDots();
  }

  track.addEventListener('transitionend', () => {
    isTransitioning = false;
    if (currentIndex >= totalSlides * 2) {
      currentIndex = totalSlides;
      track.style.transition = 'none';
      track.style.transform = `translateX(${-currentIndex * slideWidth}px)`;
    } else if (currentIndex < totalSlides) {
      currentIndex = totalSlides * 2 -1;
      track.style.transition = 'none';
      track.style.transform = `translateX(${-currentIndex * slideWidth}px)`;
    }
  });

  const nextSlide = () => moveToIndex(currentIndex + 1);
  const prevSlide = () => moveToIndex(currentIndex - 1);

  nextBtn.addEventListener('click', nextSlide);
  prevBtn.addEventListener('click', prevSlide);

  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      moveToIndex(totalSlides + index);
    });
  });
  
  let autoPlay = setInterval(nextSlide, 5000);
  carouselContainer.addEventListener('mouseenter', () => clearInterval(autoPlay));
  carouselContainer.addEventListener('mouseleave', () => autoPlay = setInterval(nextSlide, 5000));

  updateDots();
});
</script>